SELECT QUESTIONNAIRE.TITRE
FROM QUESTIONNAIRE
LEFT JOIN PARTICIPER ON PARTICIPER.IDQ = QUESTIONNAIRE.IDQ
LEFT JOIN UTILISATEUR on PARTICIPER.ID = UTILISATEUR.ID
WHERE UTILISATEUR.NOM = "Godefert" AND UTILISATEUR.PRENOM = "Maxence"

SELECT QUESTIONNAIRE.TITRE, QUESTIONNAIRE.DATE_OUVERTURE, QUESTIONNAIRE.DATE_FERMETURE, QUESTIONNAIRE.DESCRIPTION, UTILISATEUR.NOM, UTILISATEUR.PRENOM, SUM(REPONSE_CHOISIE.OKPASOK*REGLES_QUESTIONNAIRE.PLUS), PARTICIPER.CLASSEMENT, PARTICIPER.DATE_PARTICIPATION
FROM QUESTIONNAIRE
JOIN UTILISATEUR ON QUESTIONNAIRE.ID = UTILISATEUR.ID
JOIN AJOUTER ON QUESTIONNAIRE.IDQ = AJOUTER.IDQ
JOIN QUESTION ON QUESTION.ID_QUEST = AJOUTER.ID_QUEST
JOIN REPONSE_CHOISIE ON REPONSE_CHOISIE.ID_QUEST = QUESTION.ID_QUEST
JOIN REGLES_QUESTIONNAIRE ON REGLES_QUESTIONNAIRE.ID_REGLES_QUEST = QUESTIONNAIRE.ID_REGLES_QUEST
JOIN PARTICIPER ON PARTICIPER.IDQ=QUESTIONNAIRE.IDQ
WHERE REPONSE_CHOISIE.ID=2
GROUP BY QUESTIONNAIRE.IDQ

/*Affichage d'une questionnaire*/
SELECT QUESTIONNAIRE.TITRE, QUESTIONNAIRE.DATE_OUVERTURE, QUESTIONNAIRE.DATE_FERMETURE, QUESTIONNAIRE.DESCRIPTION, UTILISATEUR.NOM, UTILISATEUR.PRENOM, QUESTIONNAIRE.MODE_ACCES, QUESTIONNAIRE.LIEN_HTTP
FROM QUESTIONNAIRE
JOIN UTILISATEUR ON QUESTIONNAIRE.ID = UTILISATEUR.ID
WHERE QUESTIONNAIRE.ID = UTILISATEUR.ID AND UTILISATEUR.NOM="Pinot" AND UTILISATEUR.PRENOM="Rémy"

/*Affichage d'une question et ses reponses possibles*/
SELECT QUESTION.INTITULE, QUESTION.TYPEQ, REPONSES_POSSIBLES.ENONCE
FROM QUESTION
JOIN REPONSES_POSSIBLES ON QUESTION.ID_QUEST = REPONSES_POSSIBLES.ID_QUEST
WHERE QUESTION.ID_QUEST=1

/*Liste de questionnaires d'un createur*/

SELECT Q.TITRE, Q.DATE_OUVERTURE, Q.DATE_FERMETURE, Q.DESCRIPTION, COUNT(ETUDIANT.ID), COUNT(IF(PARTICIPER.DATE_PARTICIPATION IS NOT NULL, 1, 0))
FROM QUESTIONNAIRE AS Q
JOIN UTILISATEUR AS CREATEUR ON Q.ID = CREATEUR.ID
JOIN PARTICIPER ON PARTICIPER.IDQ = Q.IDQ
JOIN UTILISATEUR AS ETUDIANT ON PARTICIPER.ID = ETUDIANT.ID
WHERE CREATEUR.NOM="Fabresse" AND CREATEUR.PRENOM="Luc"
GROUP BY Q.IDQ

/*QUESTIONS D'UNE QUESTIONNAIRE*/ 
SELECT QUESTIONNAIRE.TITRE, QUESTION.INTITULE
FROM QUESTIONNAIRE
JOIN AJOUTER on AJOUTER.IDQ=QUESTIONNAIRE.IDQ
JOIN QUESTION on AJOUTER.ID_QUEST=QUESTION.ID_QUEST
WHERE QUESTIONNAIRE.IDQ = 1
ORDER BY QUESTION.ID_QUEST

/*REPONSES POSSIBLES D'UNE QUESTION*/ 

SELECT QU.INTITULE, RP.ENONCE, T.TAG, RQ.PLUS, RQ.MOINS, RQ.NEUTRE
FROM QUESTION AS QU
JOIN REPONSES_POSSIBLES AS RP ON RP.ID_QUEST = QU.ID_QUEST
JOIN TAGGER AS T ON T.ID_QUEST=QU.ID_QUEST
JOIN AJOUTER AS A ON A.ID_QUEST=QU.ID_QUEST
JOIN QUESTIONNAIRE AS Q ON A.IDQ = Q.IDQ
JOIN REGLES_QUESTIONNAIRE AS RQ ON RQ.ID_REGLES_QUEST= Q.ID_REGLES_QUEST
WHERE QU.ID_QUEST=1
ORDER BY RP.ID_REPONSE

/*CREATION D'UNE QUESTIONNAIRE*/

INSERT INTO QUESTIONNAIRE(IDQ, ID, TITRE, ID_REGLES_QUEST, DESCRIPTION, ETAT, DATE_OUVERTURE, 
DATE_FERMETURE,MODE_ACCES,LIEN_HTTP)
VALUES (NULL,6,'langage C', 5 ,'Ici on testera vos connaissances sur ce langage','OUVERT','2019-04-10','2019-04-20','Public','lien6')

INSERT INTO QUESTION(INTITULE,ID_QUEST,TYPEQ,TEMPS_MAXIMAL)
VALUES ("Qu'est-ce qu'un pointeur",NULL,'QCM',120)

INSERT INTO REPONSES_POSSIBLES
VALUES (NULL,7,'une variable qui stocke une adresse',true,NULL),(NULL,7,"une variable qui contient l'adresse mémoire d'une autre variable",false,NULL)

INSERT INTO QUESTION(INTITULE,ID_QUEST,TYPEQ,TEMPS_MAXIMAL)
VALUES ("En programmation en langage C, quel signe utilise-t-on pour le test d'égalité ?",NULL,'QCM',20)

INSERT INTO REPONSES_POSSIBLES VALUES (NULL,8,"=",true,NULL),(NULL,8,":=",false,NULL),(NULL,8,"==",false,NULL)

INSERT INTO AJOUTER(IDQ, ID_QUEST) VALUES (7,8), (7,7)


/*ASOCIER UN TAG*/
INSERT INTO TAGGER(ID_QUEST, TAG) VALUES (7,'Langage-C')

/*TESTER AVEC LE PROFESSEUR*/
SELECT ID 
FROM UTILISATEUR AS CREATEUR
WHERE CREATEUR.NOM="Fabresse" AND CREATEUR.PRENOM="Luc"
INSERT INTO `QUESTIONNAIRE`(`IDQ`, `ID`, `TITRE`, `ID_REGLES_QUEST`, `DESCRIPTION`, `ETAT`, `DATE_OUVERTURE`, `DATE_FERMETURE`, `MODE_ACCES`, `LIEN_HTTP`) VALUES (NULL,ID,'langage C', 5 ,'Ici on testera vos connaissances sur ce langage','OUVERT','10-avril-2019','20-avril-2019','Public','lien6')

/*STATISTIQUES*/
SELECT COUNT(*)
FROM QUESTIONNAIRE

SELECT COUNT(*)
FROM UTILISATEUR

SELECT COUNT(*)
FROM QUESTION

/*DETAILS D'UN QUESTIONNAIRE*/
SELECT Q.TITRE,PARTICIPANT.NOM, PARTICIPANT.PRENOM, R.ENONCE, RC.OKPASOK, PAR.CLASSEMENT, RQ.PLUS,SUM(RC.OKPASOK*RQ.PLUS)-count(nullif(RQ.OKPASOK, true))*RQ.MOINS)
  
FROM QUESTIONNAIRE AS Q
JOIN AJOUTER ON Q.IDQ = AJOUTER.IDQ
JOIN QUESTION AS QU ON QU.ID_QUEST = AJOUTER.ID_QUEST
JOIN REPONSE_CHOISIE AS RC ON RC.ID_QUEST = QU.ID_QUEST
JOIN APPARTENIR AS APP ON APP.IDRC = RC.IDRC
JOIN REPONSES_POSSIBLES AS R ON R.ID_REPONSE= APP.ID_REPONSE
JOIN REGLES_QUESTIONNAIRE AS RQ ON RQ.ID_REGLES_QUEST = Q.ID_REGLES_QUEST
JOIN PARTICIPER AS PAR ON PAR.IDQ=Q.IDQ
JOIN UTILISATEUR AS PARTICIPANT ON PARTICIPANT.ID= RC.ID
WHERE Q.IDQ=3

/*Afficher score max, min, moyenne*/
SELECT Q.TITRE,PARTICIPANT.NOM, PARTICIPANT.PRENOM,PAR.CLASSEMENT, MAX(SUM(RC.OKPASOK*RQ.PLUS)-SUM(NOT(RC.OKPASOK)*RQ.PLUS)),MIN(SUM(RC.OKPASOK*RQ.PLUS)-SUM(NOT(RC.OKPASOK)*RQ.PLUS)),
AVG(SUM(nullif(RC.OKPASOK, false)*RQ.PLUS)-SUM(NOT(RC.OKPASOK)*RQ.PLUS))  
FROM QUESTIONNAIRE AS Q
JOIN AJOUTER ON Q.IDQ = AJOUTER.IDQ
JOIN QUESTION AS QU ON QU.ID_QUEST = AJOUTER.ID_QUEST
JOIN REPONSE_CHOISIE AS RC ON RC.ID_QUEST = QU.ID_QUEST
JOIN REGLES_QUESTIONNAIRE AS RQ ON RQ.ID_REGLES_QUEST = Q.ID_REGLES_QUEST
JOIN PARTICIPER AS PAR ON PAR.IDQ=Q.IDQ
JOIN UTILISATEUR AS PARTICIPANT ON PARTICIPANT.ID= RC.ID
WHERE Q.IDQ=3
GROUP BY PARTICIPANT.ID

/* Nombre de mauvaises et bon reponses */
SELECT Q.TITRE,PARTICIPANT.NOM, PARTICIPANT.PRENOM,  count(nullif(RC.OKPASOK, false)),  count(nullif(RC.OKPASOK, true))


FROM QUESTIONNAIRE AS Q

JOIN AJOUTER ON Q.IDQ = AJOUTER.IDQ

JOIN QUESTION AS QU ON QU.ID_QUEST = AJOUTER.ID_QUEST

JOIN REPONSE_CHOISIE AS RC ON RC.ID_QUEST = QU.ID_QUEST

JOIN UTILISATEUR AS PARTICIPANT ON PARTICIPANT.ID= RC.ID

WHERE Q.IDQ=3



